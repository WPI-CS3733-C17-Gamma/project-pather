import com.sun.corba.se.impl.orbutil.graph.Graph;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;

import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;

public class MapAdminController extends DisplayController implements Initializable {
//    MapAdminDisplay display;
    GraphNode secondaryNode;

    @FXML
    private Button buttonSave;
    @FXML
    private Button buttonCancel;
    @FXML
    private ToggleButton togglebuttonAddNode;
    @FXML
    private ToggleButton togglebuttonAddConnections;
    @FXML
    private ImageView imageviewMap;
    @FXML
    private AnchorPane anchorpaneMap;
    @FXML
    private AnchorPane anchorpaneWindow;
    @FXML
    private Button buttonDelete;

    private GraphNode tempNode ;

    private GraphNode selectedNode;

    String mapName;

    double yDrop;


    /**
     *  Construct map admin controller
     * @param map all the data for the program
     * @param applicationController main controller
     * @param currentMap
     */
    public MapAdminController(Map map, ApplicationController applicationController, String currentMap) {
        super(map, applicationController, currentMap);


    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        setMap(location.toString());
        initDraw();
        yDrop = anchorpaneWindow.getLayoutY();
    }

    void update(){
        //needs to update the database with any changes

    }

    public void login(String credentials){
        //no need to worry about this for this iteration
    }

    public void initDraw(){
        List<GraphNode> l = getNodes(map, mapName);
        HashMap<GraphNode, GraphNode> g = map.graph.getGraphConnections();
        buttonDelete.setVisible(false);
        for (int i = 0; i < l.size(); i++){
            drawNode(l.get(i).getLocation());
            if(g.containsKey(l.get(i))){
                drawConnection(l.get(i).location, g.get(l.get(i)).location);
            }
        }
    }


//----------------------------------------------------------------------------------------------------------------------

    /**
     * Create node from given location. Make new GraphNode
     * @param location location to create a point at
     */
    public void addNode(FloorPoint location){
        map.addNode(new GraphNode(location));
        drawNode(location);
    }

    public void addNodeGraphically(MouseEvent e){
    addNode(getMouseLocation(e));
    }

    /**
     * Given the user mouse click, return the node they selected
     * If it is outside an acceptable distance, do not select the node
     * @param loc location generated by mouse click
     * @return selected GraphNode
     */
    public GraphNode nearbyNode(FloorPoint loc){
        List<GraphNode> tempNodeList = getNodes(map, mapName);

        int targetVariation = 7;

        int targetX;
        int targetY;
        int actualX = loc.getX();
        int actualY = loc.getY();

        for (int i = 0; i < tempNodeList.size(); i++){
            targetX = tempNodeList.get(i).location.getX();
            targetY = tempNodeList.get(i).location.getY();
            if ((Math.sqrt((Math.pow((targetX-actualX), 2)+Math.pow((targetY-actualY), 2))))< targetVariation){
                return tempNodeList.get(i);
            }
        }
        return null;
    }

    private void selectNode(MouseEvent e){
        FloorPoint f = getMouseLocation(e);
        GraphNode graphNode = nearbyNode(f);
        if (graphNode == null){
            selectedNode = null;
        } else {
            selectedNode = graphNode;
            paintNode(selectedNode);
        }
        buttonDelete.setVisible(true);
    }

    private void addRoom(){

    }

    private void paintNode(GraphNode n){
        //anchorpaneMap.getChildren().  //color doesn't change for now
    }

    private void drawNode(FloorPoint loc){
        anchorpaneMap.getChildren().addAll(new Circle((double) loc.getX(), (double) loc.getY() +yDrop, 3, Color.BLUE));
    }

    private List<GraphNode> getNodes(Map m, String floor){
        return m.graph.getGraphNodesOnFloor(floor);
    }

    /**
     * Delete a node from graph and delete the node from the adjacent nodes
     * @param node
     */
    public void deleteNode(GraphNode node){
        map.deleteNode(node);
        anchorpaneMap.getChildren().removeAll();
        initDraw();
        buttonDelete.setVisible(false);
    }

    /**
     * add a room to the selected node given a node and a name
     * @param node
     * @param roomName
     */
    public void addRoomToNode(GraphNode node, String roomName) {
        boolean successfulAdd = map.addRoom(new Room(node, roomName));
    }

    public void deleteRoomFromNode(GraphNode node) {
        boolean successfulDelete = map.deleteRoom(node);    //why?
    }



//----------------------------------------------------------------------------------------------------------------------

    /**
     * Add connection from nodeA to nodeB and
     * from nodeB to nodeA
     * Does not add a connection if it already exists
     * @param nodeA
     * @param nodeB
     */
    public void addConnection(GraphNode nodeA, GraphNode nodeB){
        map.addConnection(nodeA, nodeB);
        drawConnection(nodeA.location, nodeB.location);
    }

    public void deleteConnection(GraphNode nodeA, GraphNode nodeB){
        map.deleteConnection(nodeA, nodeB);
        anchorpaneMap.getChildren().removeAll();
        initDraw();
    }

    public void addConnectionPressed(MouseEvent n){

            tempNode = nearbyNode(getMouseLocation(n));
        }


    public void addConnectionReleased(MouseEvent m) {

            GraphNode tempFinal = nearbyNode(getMouseLocation(m));
            if (tempNode == null || tempFinal == null) {
                //Add in error exception
                System.out.println("Missing node");
            } else if (tempFinal.equals(tempNode)) {
                //Add in error exception
                System.out.println("Too close");
            } else {
                addConnection(tempNode, tempFinal);
            }
        }


    public void drawConnection(FloorPoint x1, FloorPoint x2){
        Line l = new Line(x1.getX(), x1.getY()+yDrop, x2.getX(), x2.getY()+yDrop);
        l.setFill(Color.BLACK);
        anchorpaneMap.getChildren().add(l);
    }



//----------------------------------------------------------------------------------------------------------------------

    private FloorPoint getMouseLocation(MouseEvent m){
        return new FloorPoint((int) m.getX(), (int) m.getY(), mapName);
    }

    public void isClicked(MouseEvent m){
        if (togglebuttonAddNode.isSelected()) {
            addNodeGraphically(m);
        } else{
            selectNode(m);
        }
    }

    public void isPressed(MouseEvent m){

        if (togglebuttonAddConnections.isSelected()){
            addConnectionPressed(m);
        }
    }

    public void isReleased(MouseEvent m){
        if (togglebuttonAddConnections.isSelected()){
            addConnectionReleased(m);
        }
    }



    public void noMoreConnections(){ //checks if connections button is pushed
        if (togglebuttonAddConnections.isSelected()){
            togglebuttonAddConnections.setSelected(false);
        }
    }

    public void noMoreNodes(){      //checks if nodes button is pushed
        if (togglebuttonAddNode.isSelected()){
            togglebuttonAddNode.setSelected(false);
        }
    }

    public void done(){
        //Save function here
        togglebuttonAddNode.setSelected(false);
        togglebuttonAddConnections.setSelected(false);
        applicationController.createPatientDisplay();
    }

//----------------------------------------------------------------------------------------------------------------------

    private void setMap(String loc){
        //System.out.println(loc);
        Image floor3 = new Image("Maps/floor3.png");
        imageviewMap.setImage(floor3);
        this.mapName = loc;
    }
}
/*
TO-DO
+ connections have 2 nodes
+ takes current state of map and loads - should work, not tested
- select connections and delete
- select nodes and delete
- add room to node (menu with name)
+ prevent nodes and connections to be made at the same time
+ add exit button
*/
