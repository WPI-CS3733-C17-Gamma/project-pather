public class MapAdminController extends DisplayController {

//    MapAdminDisplay display;
    GraphNode selectedNode;
    GraphNode secondaryNode;

    /**
     *  Construct map admin controller
     * @param map all the data for the program
     * @param applicationController main controller
     * @param currentMap
     */
    public MapAdminController(Map map, ApplicationController applicationController, String currentMap) {
        super(map, applicationController, currentMap);
    }

    void update(){
    }

    public void login(String credentials){
    }

    /**
     * Create node from given location. Make new GraphNode
     * @param location location to create a point at
     */
    public void addNode(FloorPoint location){
        map.addNode(new GraphNode(location));
    }

    /**
     * Given the user mouse click, return the node they selected
     * If it is outside an acceptable distance, do not select the node
     * @param loc location generated by mouse click
     * @return selected GraphNode
     */
    public GraphNode selectNode(FloorPoint loc){
        GraphNode selected = map.getGraphNode(loc);
        int acceptableDistance = 100; // if farther than 100 units, don't select point

        if (selected != null && selected.location.distance(loc) < acceptableDistance) {
            return selected;
        }
        else {
            return null;
        }
    }

    public void deleteNode(GraphNode node){
    }

    /**
     * Add connection from nodeA to nodeB and
     * from nodeB to nodeA
     * Does not add a connection if it already exists
     * @param nodeA
     * @param nodeB
     */
    public void addConnection(GraphNode nodeA, GraphNode nodeB){
        boolean addedSuccesfully = map.addConnection(nodeA, nodeB);
    }

    public void deleteConnection(GraphNode nodeA, GraphNode nodeB){
    }

    /**
     * add a room to the selected node given a node and a name
     * @param node
     * @param roomName
     */
    public void addRoomToNode(GraphNode node, String roomName) {
        boolean successfulAdd = map.addRoom(new Room(node, roomName));
    }

}
