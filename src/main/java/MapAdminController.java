import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.awt.*;
import java.io.File;

public class MapAdminController extends DisplayController {
//    MapAdminDisplay display;
    GraphNode selectedNode;
    GraphNode secondaryNode;

    @FXML
    private Button buttonSave;
    @FXML
    private Button buttonCancel;
    @FXML
    private ToggleButton togglebuttonAddNode;
    @FXML
    private ToggleButton togglebuttonAddConnections;
    @FXML
    private ImageView imageviewMap;

    String mapName;

    /**
     *  Construct map admin controller
     * @param map all the data for the program
     * @param applicationController main controller
     * @param currentMap
     */
    public MapAdminController(Map map, ApplicationController applicationController, String currentMap) {
        super(map, applicationController, currentMap);
    }

    void update(){
    }

    public void login(String credentials){
    }

    /**
     * Create node from given location. Make new GraphNode
     * @param location location to create a point at
     */
    public void addNode(FloorPoint location){
        //need to add database save code
    }

    public void addNodeGraphically(){
        addNode(getMouseLocation());
    }

    /**
     * Given the user mouse click, return the node they selected
     * If it is outside an acceptable distance, do not select the node
     * @param loc location generated by mouse click
     * @return selected GraphNode
     */
    public GraphNode selectNode(FloorPoint loc){
        GraphNode selected = map.getGraphNode(loc);
        int acceptableDistance = 100; // if farther than 100 units, don't select point

        if (selected != null && selected.location.distance(loc) < acceptableDistance) {
            return selected;
        }
        else {
            return null;
        }
    }

    /**
     * Delete a node from graph and delete the node from the adjacent nodes
     * @param node
     */
    public void deleteNode(GraphNode node){

        map.deleteNode(node);
    }

    /**
     * Add connection from nodeA to nodeB and
     * from nodeB to nodeA
     * Does not add a connection if it already exists
     * @param nodeA
     * @param nodeB
     */
    public void addConnection(GraphNode nodeA, GraphNode nodeB){
        boolean addedSuccesfully = map.addConnection(nodeA, nodeB);
    }

    public void deleteConnection(GraphNode nodeA, GraphNode nodeB){
    }

    private void setMap(String loc, String mapName){
        File file = new File(loc);
        Image map = new Image(file.toURI().toString());
        imageviewMap.setImage(map);
        this.mapName = mapName;
    }

    private void isClicked(){
        if (togglebuttonAddNode.isSelected()){
            addNodeGraphically();
        } else if (togglebuttonAddConnections.isSelected()){
            //add in AddConnections stuff
        }
    }

    private FloorPoint getMouseLocation(){
        PointerInfo a = MouseInfo.getPointerInfo();
        Point b = a.getLocation();

        return new FloorPoint(((int) b.getX()),(int) b.getY(),mapName);
    }

}
